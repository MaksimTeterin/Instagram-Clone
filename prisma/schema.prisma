// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  username  String     @unique
  email     String     @unique
  password  String
  name      String?
  bio       String?
  avatarUrl String? // Profile picture URL
  posts     Post[] // One-to-many relationship with Post
  comments  Comment[] // One-to-many relationship with Comment
  likes     Like[] // One-to-many relationship with Like
  followers Follower[] @relation("followers_following")
  following Follower[] @relation("followers_follower")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Post {
  id        Int       @id @default(autoincrement())
  caption   String?
  imageUrl  String // Image URL
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  comments  Comment[] // One-to-many relationship with Comment
  likes     Like[] // One-to-many relationship with Like
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
}

model Follower {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("followers_follower", fields: [followerId], references: [id])
  followerId  Int
  following   User     @relation("followers_following", fields: [followingId], references: [id])
  followingId Int
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId]) // Prevent duplicate follower-following pairs
}
